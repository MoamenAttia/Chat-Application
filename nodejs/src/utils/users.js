const users = [];
// addUser , getUser, removeUser , getUsers

/**
 * @param  {number} id       => generated by socket.io ( 7aga built in ).
 * @param  {string} username  => provided by the app.
 * @param  {string} room      => provided by the app.
 */
const addUser = ({id, username, room}) => {
    // clean the data ( remove spaces , lowercase everything ).
    username = username.trim().toLowerCase();
    room = room.trim().toLowerCase();

    // check empty strings
    if (!username || !room) {
        return { error: 'username and room must be provided!' };
    }

    // check for duplication => room must have unique users
    const existingUser = users.find((user) => user.room === room && user.username === username);
    if (existingUser) {
        return { error: 'username is in use!' };
    }

    // store user
    const user = { id, username, room };
    users.push(user);
    return { user };
};


/**
 * @param  {number} id => provided by socket.io
 */
const getUser = (id) => {
    return users.find((user) => user.id === id);
};


/**
 * @param  {number} id => provided by socket.io
 */
const removeUser = (id) => {
    const idx = users.findIndex((user) => user.id === id);
    if (idx != -1) {
        return {user: users.splice(idx, 1)[0]};
    }
    return { error: 'no user has this id' };
};


/**
 * @param  {string} room => provided by the app.
 */
const getUsersInRoom = (room) => {
    room = room.trim().toLowerCase();
    return users.filter((user) => user.room === room);
};

module.exports = { getUser, addUser, getUsersInRoom, removeUser };